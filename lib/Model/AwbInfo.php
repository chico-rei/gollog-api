<?php
/**
 * AwbInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Central do desenvolvedor - Nexlog API
 *
 * De maneira pratica e rápida, entenda como conectar e consumir todas as informações necessárias para seu negócio. </br> <h2> Ambientes</h2> Os ambientes do gateway de integração são divididos atualmente em 2 ambientes:<br> &ensp;&ensp;&ensp;&ensp;&ensp;<b>QA</b>:&ensp;ambiente utilizado para desenvolvimento de novas integrações e testes com os clientes e parceiros.<br>&ensp;&ensp;&ensp;<b>Prod</b>:&ensp;ambiente de produção com todas os serviços expostos com certificação de qualidade. </br> <h2>Informações Adicionais</h2>                 A central do desenvolvedor conta com uma completa documentação referente a todos os APIs expostos, com exemplos de request/response, modelo e possibilidade de realizar testes direto no barramento. </br></br> Atualmente nossa central está separada com 2 dominios de integração:</br>&ensp;&ensp;&ensp; <b>- Account</b> <br> &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;Serviços para autenticação quando necessário.</br>&ensp;&ensp;&ensp; <b>- Sales</b> <br> &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;Disponibilização de serviços para utilização de rastreio, cotações, minutas e documentos autorizados.<br>&ensp;&ensp;&ensp; <b>- Operations</b> <br> &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;Disponibilização de consulta de bases operacionais.<br>(*)Dependendo do endpoint utilizado, algumas informações são obrigatórias, como identificador da aplicação/cliente e token.<br><br> Dúvidas sobre como utilizar, entre em contato br-operations@ttinteractive.com
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AwbInfo Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AwbInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AwbInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'awb' => 'string',
        'fiscal' => '\Swagger\Client\Model\Fiscal',
        'reference' => 'string',
        'cte' => 'string',
        'agent' => '\Swagger\Client\Model\Agent',
        'product' => 'string',
        'product_description' => 'string',
        'issuedatetime' => 'string',
        'routing' => '\Swagger\Client\Model\Routing',
        'shcs' => 'string',
        'description' => 'string',
        'totals' => '\Swagger\Client\Model\Totals',
        'value' => '\Swagger\Client\Model\Value'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'awb' => null,
        'fiscal' => null,
        'reference' => null,
        'cte' => null,
        'agent' => null,
        'product' => null,
        'product_description' => null,
        'issuedatetime' => null,
        'routing' => null,
        'shcs' => null,
        'description' => null,
        'totals' => null,
        'value' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'awb' => 'awb',
        'fiscal' => 'fiscal',
        'reference' => 'reference',
        'cte' => 'cte',
        'agent' => 'agent',
        'product' => 'product',
        'product_description' => 'productDescription',
        'issuedatetime' => 'issuedatetime',
        'routing' => 'routing',
        'shcs' => 'shcs',
        'description' => 'description',
        'totals' => 'totals',
        'value' => 'value'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'awb' => 'setAwb',
        'fiscal' => 'setFiscal',
        'reference' => 'setReference',
        'cte' => 'setCte',
        'agent' => 'setAgent',
        'product' => 'setProduct',
        'product_description' => 'setProductDescription',
        'issuedatetime' => 'setIssuedatetime',
        'routing' => 'setRouting',
        'shcs' => 'setShcs',
        'description' => 'setDescription',
        'totals' => 'setTotals',
        'value' => 'setValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'awb' => 'getAwb',
        'fiscal' => 'getFiscal',
        'reference' => 'getReference',
        'cte' => 'getCte',
        'agent' => 'getAgent',
        'product' => 'getProduct',
        'product_description' => 'getProductDescription',
        'issuedatetime' => 'getIssuedatetime',
        'routing' => 'getRouting',
        'shcs' => 'getShcs',
        'description' => 'getDescription',
        'totals' => 'getTotals',
        'value' => 'getValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['awb'] = isset($data['awb']) ? $data['awb'] : null;
        $this->container['fiscal'] = isset($data['fiscal']) ? $data['fiscal'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['cte'] = isset($data['cte']) ? $data['cte'] : null;
        $this->container['agent'] = isset($data['agent']) ? $data['agent'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['product_description'] = isset($data['product_description']) ? $data['product_description'] : null;
        $this->container['issuedatetime'] = isset($data['issuedatetime']) ? $data['issuedatetime'] : null;
        $this->container['routing'] = isset($data['routing']) ? $data['routing'] : null;
        $this->container['shcs'] = isset($data['shcs']) ? $data['shcs'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['totals'] = isset($data['totals']) ? $data['totals'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Identification number
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets awb
     *
     * @return string
     */
    public function getAwb()
    {
        return $this->container['awb'];
    }

    /**
     * Sets awb
     *
     * @param string $awb Awb number example \"12700000000\"
     *
     * @return $this
     */
    public function setAwb($awb)
    {
        $this->container['awb'] = $awb;

        return $this;
    }

    /**
     * Gets fiscal
     *
     * @return \Swagger\Client\Model\Fiscal
     */
    public function getFiscal()
    {
        return $this->container['fiscal'];
    }

    /**
     * Sets fiscal
     *
     * @param \Swagger\Client\Model\Fiscal $fiscal fiscal
     *
     * @return $this
     */
    public function setFiscal($fiscal)
    {
        $this->container['fiscal'] = $fiscal;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference AWB reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets cte
     *
     * @return string
     */
    public function getCte()
    {
        return $this->container['cte'];
    }

    /**
     * Sets cte
     *
     * @param string $cte CTE protocol example \"35191007575651001554570010000134661784045176\"
     *
     * @return $this
     */
    public function setCte($cte)
    {
        $this->container['cte'] = $cte;

        return $this;
    }

    /**
     * Gets agent
     *
     * @return \Swagger\Client\Model\Agent
     */
    public function getAgent()
    {
        return $this->container['agent'];
    }

    /**
     * Sets agent
     *
     * @param \Swagger\Client\Model\Agent $agent agent
     *
     * @return $this
     */
    public function setAgent($agent)
    {
        $this->container['agent'] = $agent;

        return $this;
    }

    /**
     * Gets product
     *
     * @return string
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string $product Service code example \"NOR\".
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets product_description
     *
     * @return string
     */
    public function getProductDescription()
    {
        return $this->container['product_description'];
    }

    /**
     * Sets product_description
     *
     * @param string $product_description Service code example \"NORMAL FREIGHT\".
     *
     * @return $this
     */
    public function setProductDescription($product_description)
    {
        $this->container['product_description'] = $product_description;

        return $this;
    }

    /**
     * Gets issuedatetime
     *
     * @return string
     */
    public function getIssuedatetime()
    {
        return $this->container['issuedatetime'];
    }

    /**
     * Sets issuedatetime
     *
     * @param string $issuedatetime Issue date time
     *
     * @return $this
     */
    public function setIssuedatetime($issuedatetime)
    {
        $this->container['issuedatetime'] = $issuedatetime;

        return $this;
    }

    /**
     * Gets routing
     *
     * @return \Swagger\Client\Model\Routing
     */
    public function getRouting()
    {
        return $this->container['routing'];
    }

    /**
     * Sets routing
     *
     * @param \Swagger\Client\Model\Routing $routing routing
     *
     * @return $this
     */
    public function setRouting($routing)
    {
        $this->container['routing'] = $routing;

        return $this;
    }

    /**
     * Gets shcs
     *
     * @return string
     */
    public function getShcs()
    {
        return $this->container['shcs'];
    }

    /**
     * Sets shcs
     *
     * @param string $shcs A array of Special handling codes.
     *
     * @return $this
     */
    public function setShcs($shcs)
    {
        $this->container['shcs'] = $shcs;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets totals
     *
     * @return \Swagger\Client\Model\Totals
     */
    public function getTotals()
    {
        return $this->container['totals'];
    }

    /**
     * Sets totals
     *
     * @param \Swagger\Client\Model\Totals $totals totals
     *
     * @return $this
     */
    public function setTotals($totals)
    {
        $this->container['totals'] = $totals;

        return $this;
    }

    /**
     * Gets value
     *
     * @return \Swagger\Client\Model\Value
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param \Swagger\Client\Model\Value $value value
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


