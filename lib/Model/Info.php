<?php
/**
 * Info
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Central do desenvolvedor - Nexlog API
 *
 * De maneira pratica e rápida, entenda como conectar e consumir todas as informações necessárias para seu negócio. </br> <h2> Ambientes</h2> Os ambientes do gateway de integração são divididos atualmente em 2 ambientes:<br> &ensp;&ensp;&ensp;&ensp;&ensp;<b>QA</b>:&ensp;ambiente utilizado para desenvolvimento de novas integrações e testes com os clientes e parceiros.<br>&ensp;&ensp;&ensp;<b>Prod</b>:&ensp;ambiente de produção com todas os serviços expostos com certificação de qualidade. </br> <h2>Informações Adicionais</h2>                 A central do desenvolvedor conta com uma completa documentação referente a todos os APIs expostos, com exemplos de request/response, modelo e possibilidade de realizar testes direto no barramento. </br></br> Atualmente nossa central está separada com 2 dominios de integração:</br>&ensp;&ensp;&ensp; <b>- Account</b> <br> &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;Serviços para autenticação quando necessário.</br>&ensp;&ensp;&ensp; <b>- Sales</b> <br> &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;Disponibilização de serviços para utilização de rastreio, cotações, minutas e documentos autorizados.<br>&ensp;&ensp;&ensp; <b>- Operations</b> <br> &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;Disponibilização de consulta de bases operacionais.<br>(*)Dependendo do endpoint utilizado, algumas informações são obrigatórias, como identificador da aplicação/cliente e token.<br><br> Dúvidas sobre como utilizar, entre em contato br-operations@ttinteractive.com
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Info Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Info implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Info';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'weight_metric' => 'string',
        'volume_metric' => 'string',
        'dimension_metric' => 'string',
        'currency' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'weight_metric' => null,
        'volume_metric' => null,
        'dimension_metric' => null,
        'currency' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'weight_metric' => 'weightMetric',
        'volume_metric' => 'volumeMetric',
        'dimension_metric' => 'dimensionMetric',
        'currency' => 'currency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'weight_metric' => 'setWeightMetric',
        'volume_metric' => 'setVolumeMetric',
        'dimension_metric' => 'setDimensionMetric',
        'currency' => 'setCurrency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'weight_metric' => 'getWeightMetric',
        'volume_metric' => 'getVolumeMetric',
        'dimension_metric' => 'getDimensionMetric',
        'currency' => 'getCurrency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['weight_metric'] = isset($data['weight_metric']) ? $data['weight_metric'] : null;
        $this->container['volume_metric'] = isset($data['volume_metric']) ? $data['volume_metric'] : null;
        $this->container['dimension_metric'] = isset($data['dimension_metric']) ? $data['dimension_metric'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets weight_metric
     *
     * @return string
     */
    public function getWeightMetric()
    {
        return $this->container['weight_metric'];
    }

    /**
     * Sets weight_metric
     *
     * @param string $weight_metric weight_metric
     *
     * @return $this
     */
    public function setWeightMetric($weight_metric)
    {
        $this->container['weight_metric'] = $weight_metric;

        return $this;
    }

    /**
     * Gets volume_metric
     *
     * @return string
     */
    public function getVolumeMetric()
    {
        return $this->container['volume_metric'];
    }

    /**
     * Sets volume_metric
     *
     * @param string $volume_metric volume_metric
     *
     * @return $this
     */
    public function setVolumeMetric($volume_metric)
    {
        $this->container['volume_metric'] = $volume_metric;

        return $this;
    }

    /**
     * Gets dimension_metric
     *
     * @return string
     */
    public function getDimensionMetric()
    {
        return $this->container['dimension_metric'];
    }

    /**
     * Sets dimension_metric
     *
     * @param string $dimension_metric dimension_metric
     *
     * @return $this
     */
    public function setDimensionMetric($dimension_metric)
    {
        $this->container['dimension_metric'] = $dimension_metric;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


