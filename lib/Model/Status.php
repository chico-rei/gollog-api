<?php
/**
 * Status
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Central do desenvolvedor - Nexlog API
 *
 * De maneira pratica e rápida, entenda como conectar e consumir todas as informações necessárias para seu negócio. </br> <h2> Ambientes</h2> Os ambientes do gateway de integração são divididos atualmente em 2 ambientes:<br> &ensp;&ensp;&ensp;&ensp;&ensp;<b>QA</b>:&ensp;ambiente utilizado para desenvolvimento de novas integrações e testes com os clientes e parceiros.<br>&ensp;&ensp;&ensp;<b>Prod</b>:&ensp;ambiente de produção com todas os serviços expostos com certificação de qualidade. </br> <h2>Informações Adicionais</h2>                 A central do desenvolvedor conta com uma completa documentação referente a todos os APIs expostos, com exemplos de request/response, modelo e possibilidade de realizar testes direto no barramento. </br></br> Atualmente nossa central está separada com 2 dominios de integração:</br>&ensp;&ensp;&ensp; <b>- Account</b> <br> &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;Serviços para autenticação quando necessário.</br>&ensp;&ensp;&ensp; <b>- Sales</b> <br> &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;Disponibilização de serviços para utilização de rastreio, cotações, minutas e documentos autorizados.<br>&ensp;&ensp;&ensp; <b>- Operations</b> <br> &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;Disponibilização de consulta de bases operacionais.<br>(*)Dependendo do endpoint utilizado, algumas informações são obrigatórias, como identificador da aplicação/cliente e token.<br><br> Dúvidas sobre como utilizar, entre em contato br-operations@ttinteractive.com
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Status Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Status implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Status';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'code_description' => 'string',
        'station' => 'string',
        'station_name' => 'string',
        'pieces' => 'int',
        'weight' => 'float',
        'flight_number' => 'string',
        'arrival_date_time_lt' => 'string',
        'departure_date_time_lt' => 'string',
        'arrival_point' => 'string',
        'note' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'code_description' => null,
        'station' => null,
        'station_name' => null,
        'pieces' => 'int16',
        'weight' => 'decimal',
        'flight_number' => null,
        'arrival_date_time_lt' => null,
        'departure_date_time_lt' => null,
        'arrival_point' => null,
        'note' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'code_description' => 'codeDescription',
        'station' => 'station',
        'station_name' => 'stationName',
        'pieces' => 'pieces',
        'weight' => 'weight',
        'flight_number' => 'flightNumber',
        'arrival_date_time_lt' => 'arrivalDateTimeLT',
        'departure_date_time_lt' => 'departureDateTimeLT',
        'arrival_point' => 'arrivalPoint',
        'note' => 'note'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'code_description' => 'setCodeDescription',
        'station' => 'setStation',
        'station_name' => 'setStationName',
        'pieces' => 'setPieces',
        'weight' => 'setWeight',
        'flight_number' => 'setFlightNumber',
        'arrival_date_time_lt' => 'setArrivalDateTimeLt',
        'departure_date_time_lt' => 'setDepartureDateTimeLt',
        'arrival_point' => 'setArrivalPoint',
        'note' => 'setNote'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'code_description' => 'getCodeDescription',
        'station' => 'getStation',
        'station_name' => 'getStationName',
        'pieces' => 'getPieces',
        'weight' => 'getWeight',
        'flight_number' => 'getFlightNumber',
        'arrival_date_time_lt' => 'getArrivalDateTimeLt',
        'departure_date_time_lt' => 'getDepartureDateTimeLt',
        'arrival_point' => 'getArrivalPoint',
        'note' => 'getNote'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['code_description'] = isset($data['code_description']) ? $data['code_description'] : null;
        $this->container['station'] = isset($data['station']) ? $data['station'] : null;
        $this->container['station_name'] = isset($data['station_name']) ? $data['station_name'] : null;
        $this->container['pieces'] = isset($data['pieces']) ? $data['pieces'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['flight_number'] = isset($data['flight_number']) ? $data['flight_number'] : null;
        $this->container['arrival_date_time_lt'] = isset($data['arrival_date_time_lt']) ? $data['arrival_date_time_lt'] : null;
        $this->container['departure_date_time_lt'] = isset($data['departure_date_time_lt']) ? $data['departure_date_time_lt'] : null;
        $this->container['arrival_point'] = isset($data['arrival_point']) ? $data['arrival_point'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Status code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets code_description
     *
     * @return string
     */
    public function getCodeDescription()
    {
        return $this->container['code_description'];
    }

    /**
     * Sets code_description
     *
     * @param string $code_description Status name
     *
     * @return $this
     */
    public function setCodeDescription($code_description)
    {
        $this->container['code_description'] = $code_description;

        return $this;
    }

    /**
     * Gets station
     *
     * @return string
     */
    public function getStation()
    {
        return $this->container['station'];
    }

    /**
     * Sets station
     *
     * @param string $station Station code example \"GRU\"
     *
     * @return $this
     */
    public function setStation($station)
    {
        $this->container['station'] = $station;

        return $this;
    }

    /**
     * Gets station_name
     *
     * @return string
     */
    public function getStationName()
    {
        return $this->container['station_name'];
    }

    /**
     * Sets station_name
     *
     * @param string $station_name Station name example \"GRU - CARGAS S/A\",
     *
     * @return $this
     */
    public function setStationName($station_name)
    {
        $this->container['station_name'] = $station_name;

        return $this;
    }

    /**
     * Gets pieces
     *
     * @return int
     */
    public function getPieces()
    {
        return $this->container['pieces'];
    }

    /**
     * Sets pieces
     *
     * @param int $pieces Quantity of pieces
     *
     * @return $this
     */
    public function setPieces($pieces)
    {
        $this->container['pieces'] = $pieces;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return float
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param float $weight Total weight
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets flight_number
     *
     * @return string
     */
    public function getFlightNumber()
    {
        return $this->container['flight_number'];
    }

    /**
     * Sets flight_number
     *
     * @param string $flight_number Flight number
     *
     * @return $this
     */
    public function setFlightNumber($flight_number)
    {
        $this->container['flight_number'] = $flight_number;

        return $this;
    }

    /**
     * Gets arrival_date_time_lt
     *
     * @return string
     */
    public function getArrivalDateTimeLt()
    {
        return $this->container['arrival_date_time_lt'];
    }

    /**
     * Sets arrival_date_time_lt
     *
     * @param string $arrival_date_time_lt Arrival date time (Local time) Sao Paulo (GMT-3)
     *
     * @return $this
     */
    public function setArrivalDateTimeLt($arrival_date_time_lt)
    {
        $this->container['arrival_date_time_lt'] = $arrival_date_time_lt;

        return $this;
    }

    /**
     * Gets departure_date_time_lt
     *
     * @return string
     */
    public function getDepartureDateTimeLt()
    {
        return $this->container['departure_date_time_lt'];
    }

    /**
     * Sets departure_date_time_lt
     *
     * @param string $departure_date_time_lt Departure  date time (Local time) Sao Paulo (GMT-3)
     *
     * @return $this
     */
    public function setDepartureDateTimeLt($departure_date_time_lt)
    {
        $this->container['departure_date_time_lt'] = $departure_date_time_lt;

        return $this;
    }

    /**
     * Gets arrival_point
     *
     * @return string
     */
    public function getArrivalPoint()
    {
        return $this->container['arrival_point'];
    }

    /**
     * Sets arrival_point
     *
     * @param string $arrival_point Arrival point code example \"GRU\".
     *
     * @return $this
     */
    public function setArrivalPoint($arrival_point)
    {
        $this->container['arrival_point'] = $arrival_point;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note Notes about event
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


